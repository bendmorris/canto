Getting started with Canto is easy. Most of this is covered in `man canto`, but it seems like it should be online as well.

[TOC]

# Quick Start

<div class="section">

Right after you download and install Canto, I'm sure you're eager to get going. If you just run `canto`, it will start up, generate an example configuration (~/.canto/conf.py.example), fetch those feeds, and startup the interface as usual. This is to let you get a feeling for the program quickly, before messing around with the configuration. Here's the output for conf.py.example:

    :::python
    # Auto-generated by canto because you don't have one.
    # Please copy to/create ~/.canto/conf.py

    add("http://rss.slashdot.org/slashdot/Slashdot")
    add("http://reddit.com/.rss")
    add("http://kerneltrap.org/node/feed")
    add("http://codezen.org/canto/feeds/latest")

You can find a list of the default keybinds on the [configuration page](../config/#default-binds), to help you navigate.

</div>

# Configuration

<div class="section">

So you've messed around with the interface and want to put a little effort into a config. The first place to check is the [configuration page](../config/), to help you get on your way.

The most basic config (like the conf.example generated if you ran without a config), is just a series of `add` calls, as you can see above.

If you store your feeds in *OPML* format, you can use `canto -i <filename>` to automatically import your feeds to your config, or `source_opml()` to add them from an OPML file at run time.

If you store your feeds in a *list of URLs*, you can use `source_urls()` to read the list from a file at run time.

</div>

# Fetching

<div class="section">

In order for canto to receive updates, it's fetching program, `canto-fetch` must be run often. You can achieve this either by adding

    * * * * * canto-fetch

to your crontab, meaning that `canto-fetch` will be run once a minute while the computer is running, or if you don't use cron you can add

    canto-fetch -db

to your startup scripts (.xinitrc, etc.), this will make canto-fetch into a daemon and run itself every minute. You can also run `canto-fetch -db` by hand, or just run `canto -u` to force an update every time you run. It's up to you. 

</div>

# Tips

<div class="section">

This covers some less obvious niceties of using the Canto interface that aren't really covered by [keybinds](../config/#default-binds).

## Input Boxes

Throughout canto you might run into an input box or two. These boxes accept any sort of input (including UTF-8 characters). In addition to input though, it supports typical (Emacsy?) terminal control sequences.

<table>
<tr>
<td><pre>Ctrl + g (BEL)</pre></td>
<td>Cancel Input</td>
</tr>
<tr>
<td><pre>Ctrl + j (NL)</pre></td>
<td>Enter Input (same as Enter)</td>
</tr>
<tr>
<td><pre>Ctrl + a (SOH)</pre></td>
<td>Start of line (same as Home)</td>
</tr>
<tr>
<td><pre>Ctrl + e (ENQ)</pre></td>
<td>End of line (same as End)</td>
</tr>
</table>

Movement is also supported with the left and right arrows as well as their Emacsy equivalent. Ctrl + g is the only keybind that doesn't have an easily typable equivalent but is also probably the most useful.

## Goto Links ##

In addition to the above keybind, the reader "go to link" input box ('g' in the reader, by default) supports going to multiple links at once (very useful for posts that aggregate a number of cool links). In this input box **only** you can specify a comma delimited list of ranges. Some examples:

    1       # Goto link 1
    1,3     # Goto links 1 and 3
    1-3     # Goto links 1, 2, and 3
    1,4-6   # Goto links 1, 4, 5, 6

Also worth noting: link 0 is *always* the story's main link. Going to link 0 from the reader is equivalent to hitting 'g' (by default) in the main view.

</div>
